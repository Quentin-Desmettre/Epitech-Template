#!/usr/bin/env python3

import os, json
from base64 import b64encode
from nacl import encoding, public

def encrypt(public_key: str, secret_value: str) -> str:
    """Encrypt a Unicode string using the public key."""
    public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
    sealed_box = public.SealedBox(public_key)
    encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
    return b64encode(encrypted).decode("utf-8")

def getRequest(token, owner, repo, secret_name, encrypted, key_id):
    content = '{' + '"encrypted_value":"{}","key_id":"{}"'.format(encrypted, key_id) + '}'
    return f"""curl -L \
                -X PUT \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer {token}"\
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name} \
                -d '{content}' 2> /dev/null > /dev/null"""

def getPublicKeyRequest(token, owner, repo):
    return f"""curl -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer {token}"\
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key > publicKey.json 2> /dev/null"""

TOKEN = open("/home/qdes/.ssh/github_epitech_template_token", "r").read().strip()
OWNER = "Quentin-Desmettre"
new_owner = input("Owner (Quentin-Desmettre): ")
if len(new_owner) != 0:
    OWNER = new_owner
REPO = input("Repository name: ")
SECRETS = {
    "STAGING_SSH_USER": "ubuntu",
    "STAGING_SSH_HOST": "54.36.183.139",
    "STAGING_SSH_KEY": """-----BEGIN OPENSSH PRIVATE KEY-----
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
-----END OPENSSH PRIVATE KEY-----
""",
}

# Get public key
if (os.system(getPublicKeyRequest(TOKEN, OWNER, REPO)) != 0):
    os.remove("publicKey.json")
    exit(1)

publicKey = ""
keyId = ""
with open("publicKey.json", "r") as f:
    JSON = json.loads(f.read())
    publicKey = JSON["key"]
    keyId = JSON["key_id"]
os.remove("publicKey.json")

# Set secrets
for secret in SECRETS:
    encrypted = encrypt(publicKey, SECRETS[secret])
    if (os.system(getRequest(TOKEN, OWNER, REPO, secret, encrypted, keyId)) != 0):
        print(f"Failed to set secret {secret}")
        exit(1)
print("Done")
