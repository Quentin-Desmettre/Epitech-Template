#!/usr/bin/env python3

import os, json
from base64 import b64encode
from nacl import encoding, public

def encrypt(public_key: str, secret_value: str) -> str:
    """Encrypt a Unicode string using the public key."""
    public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
    sealed_box = public.SealedBox(public_key)
    encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
    return b64encode(encrypted).decode("utf-8")

def getRequest(token, owner, repo, secret_name, encrypted, key_id):
    content = '{' + '"encrypted_value":"{}","key_id":"{}"'.format(encrypted, key_id) + '}'
    return f"""curl -L \
                -X PUT \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer {token}"\
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name} \
                -d '{content}' 2> /dev/null > /dev/null"""

def getPublicKeyRequest(token, owner, repo):
    return f"""curl -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer {token}"\
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key > publicKey.json 2> /dev/null"""

TOKEN = open("/home/qdes/.ssh/github_epitech_template_token", "r").read().strip()
OWNER = "Quentin-Desmettre"
new_owner = input("Owner (Quentin-Desmettre): ")
if len(new_owner) != 0:
    OWNER = new_owner
REPO = input("Repository name: ")
SECRETS = {
    "STAGING_SSH_USER": "ubuntu",
    "STAGING_SSH_HOST": "54.36.183.139",
    "STAGING_SSH_KEY": open("/home/qdes/.ssh/epivps_rsa").read().strip(),
}

# Get public key
if (os.system(getPublicKeyRequest(TOKEN, OWNER, REPO)) != 0):
    os.remove("publicKey.json")
    exit(1)

publicKey = ""
keyId = ""
with open("publicKey.json", "r") as f:
    JSON = json.loads(f.read())
    publicKey = JSON["key"]
    keyId = JSON["key_id"]
os.remove("publicKey.json")

# Set secrets
for secret in SECRETS:
    encrypted = encrypt(publicKey, SECRETS[secret])
    if (os.system(getRequest(TOKEN, OWNER, REPO, secret, encrypted, keyId)) != 0):
        print(f"Failed to set secret {secret}")
        exit(1)
print("Done")
